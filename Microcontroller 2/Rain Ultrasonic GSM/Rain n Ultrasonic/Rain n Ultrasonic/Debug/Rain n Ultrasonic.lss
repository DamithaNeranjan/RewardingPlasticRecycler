
Rain n Ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  008000d4  008000d4  000006de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf7  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c2  00000000  00000000  00001493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000573  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000754  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3d       	cpi	r26, 0xD4	; 212
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ed       	ldi	r26, 0xD4	; 212
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  8a:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
{
	while(*string)
	{
		usart_data_transmit(*string++);
	}
}
  92:	10 bc       	out	0x20, r1	; 32
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	86 68       	ori	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <usart_data_transmit>:
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <usart_data_transmit>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	8f ec       	ldi	r24, 0xCF	; 207
  ae:	97 e0       	ldi	r25, 0x07	; 7
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <usart_data_transmit+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <usart_data_transmit+0x10>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <usart_data_receive>:

unsigned char usart_data_receive( void )
{
	while ( !(UCSRA & (1<<RXC)) )        // ((UCSRA & (1 << RXC)) == 0)
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <usart_data_receive>
	;
	return UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
}
  c0:	08 95       	ret

000000c2 <__vector_9>:


int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
  d0:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end>
  d4:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__data_end+0x1>
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__data_end+0x1>
  de:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__data_end>
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <Send_msg>:
		
		///////////////////////////////////////////////////////////////////////////
	}
}
void Send_msg(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	int a;
	for (a = 0; At[a] != '\0'; a++)
  f4:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <At>
  f8:	88 23       	and	r24, r24
  fa:	39 f0       	breq	.+14     	; 0x10a <Send_msg+0x1a>
  fc:	c0 ed       	ldi	r28, 0xD0	; 208
  fe:	d0 e0       	ldi	r29, 0x00	; 0

	{
		usart_data_transmit(At[a]);
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
	}
}
void Send_msg(void)
{
	int a;
	for (a = 0; At[a] != '\0'; a++)
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	fb cf       	rjmp	.-10     	; 0x100 <Send_msg+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <Send_msg+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <Send_msg+0x2a>
 11a:	00 00       	nop
		usart_data_transmit(At[a]);
		//_delay_ms(10);
	}
	_delay_ms(100);

	for (a = 0; Meg_Mode[a] != '\0'; a++)
 11c:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Meg_Mode>
 120:	88 23       	and	r24, r24
 122:	39 f0       	breq	.+14     	; 0x132 <Send_msg+0x42>
 124:	c5 ec       	ldi	r28, 0xC5	; 197
 126:	d0 e0       	ldi	r29, 0x00	; 0
	{
		usart_data_transmit(Meg_Mode[a]);
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
		usart_data_transmit(At[a]);
		//_delay_ms(10);
	}
	_delay_ms(100);

	for (a = 0; Meg_Mode[a] != '\0'; a++)
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <Send_msg+0x38>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	80 e7       	ldi	r24, 0x70	; 112
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <Send_msg+0x48>
 140:	00 c0       	rjmp	.+0      	; 0x142 <Send_msg+0x52>
 142:	00 00       	nop
		usart_data_transmit(Meg_Mode[a]);
		//_delay_ms(10);
	}
	_delay_ms(100);

	for (a = 0; Meg_cmd1[a] != '\0'; a++)
 144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <Meg_cmd1>
 148:	88 23       	and	r24, r24
 14a:	39 f0       	breq	.+14     	; 0x15a <Send_msg+0x6a>
 14c:	cc eb       	ldi	r28, 0xBC	; 188
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		usart_data_transmit(Meg_cmd1[a]);
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
		usart_data_transmit(Meg_Mode[a]);
		//_delay_ms(10);
	}
	_delay_ms(100);

	for (a = 0; Meg_cmd1[a] != '\0'; a++)
 154:	89 91       	ld	r24, Y+
 156:	81 11       	cpse	r24, r1
 158:	fb cf       	rjmp	.-10     	; 0x150 <Send_msg+0x60>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	80 e7       	ldi	r24, 0x70	; 112
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <Send_msg+0x70>
 168:	00 c0       	rjmp	.+0      	; 0x16a <Send_msg+0x7a>
 16a:	00 00       	nop
		usart_data_transmit(Meg_cmd1[a]);
		//_delay_ms(1);
	}
	_delay_ms(100);

	for (a = 0; Re_num[a] != '\0'; a++)
 16c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Re_num>
 170:	88 23       	and	r24, r24
 172:	39 f0       	breq	.+14     	; 0x182 <Send_msg+0x92>
 174:	cd ea       	ldi	r28, 0xAD	; 173
 176:	d0 e0       	ldi	r29, 0x00	; 0
	{
		usart_data_transmit(Re_num[a]);
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
		usart_data_transmit(Meg_cmd1[a]);
		//_delay_ms(1);
	}
	_delay_ms(100);

	for (a = 0; Re_num[a] != '\0'; a++)
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <Send_msg+0x88>
	{
		usart_data_transmit(Re_num[a]);
		//_delay_ms(10);
	}
	usart_data_transmit(13); //UDR=(13);    //  <CR> character
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	80 e7       	ldi	r24, 0x70	; 112
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <Send_msg+0x9e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <Send_msg+0xa8>
 198:	00 00       	nop
	_delay_ms(100);

	for (a = 0; emergency[a] != '\0'; a++)
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 19e:	88 23       	and	r24, r24
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <Send_msg+0xc0>
 1a2:	c1 e6       	ldi	r28, 0x61	; 97
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		usart_data_transmit(emergency[a]);
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
		//_delay_ms(10);
	}
	usart_data_transmit(13); //UDR=(13);    //  <CR> character
	_delay_ms(100);

	for (a = 0; emergency[a] != '\0'; a++)
 1aa:	89 91       	ld	r24, Y+
 1ac:	81 11       	cpse	r24, r1
 1ae:	fb cf       	rjmp	.-10     	; 0x1a6 <Send_msg+0xb6>
	{
		usart_data_transmit(emergency[a]);
		//_delay_ms(10);
	}
	usart_data_transmit(26);
 1b0:	8a e1       	ldi	r24, 0x1A	; 26
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	80 e7       	ldi	r24, 0x70	; 112
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <Send_msg+0xcc>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Send_msg+0xd6>
 1c6:	00 00       	nop
	_delay_ms(100);
	
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <main>:

int main(void)
{
	//////////////////////////GSM//////////////////////////////////////////////
	
	usart_init(); // initialize USART (serial communication)
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	
	int a;

	for (a = 0; Gps_on[a] != '\0'; a++) // GPS power on
 1d2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Gps_on>
 1d6:	88 23       	and	r24, r24
 1d8:	81 f0       	breq	.+32     	; 0x1fa <main+0x2c>
 1da:	cf e9       	ldi	r28, 0x9F	; 159
 1dc:	d0 e0       	ldi	r29, 0x00	; 0

	{
		usart_data_transmit(Gps_on[a]);
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
 1e2:	2f e7       	ldi	r18, 0x7F	; 127
 1e4:	88 e3       	ldi	r24, 0x38	; 56
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x1a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x24>
 1f2:	00 00       	nop
	
	usart_init(); // initialize USART (serial communication)
	
	int a;

	for (a = 0; Gps_on[a] != '\0'; a++) // GPS power on
 1f4:	89 91       	ld	r24, Y+
 1f6:	81 11       	cpse	r24, r1
 1f8:	f2 cf       	rjmp	.-28     	; 0x1de <main+0x10>
	{
		usart_data_transmit(Gps_on[a]);
		_delay_ms(50);
	}
	
	for (a = 0; Get_Gps_location[a] != '\0'; a++) // get location CGNSINF
 1fa:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Get_Gps_location>
 1fe:	88 23       	and	r24, r24
 200:	09 f4       	brne	.+2      	; 0x204 <main+0x36>
 202:	ae c0       	rjmp	.+348    	; 0x360 <main+0x192>
 204:	c3 e9       	ldi	r28, 0x93	; 147
 206:	d0 e0       	ldi	r29, 0x00	; 0

	{
		usart_data_transmit(Get_Gps_location[a]);
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_data_transmit>
	{
		usart_data_transmit(Gps_on[a]);
		_delay_ms(50);
	}
	
	for (a = 0; Get_Gps_location[a] != '\0'; a++) // get location CGNSINF
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <main+0x3a>
 212:	a6 c0       	rjmp	.+332    	; 0x360 <main+0x192>
		//_delay_ms(10);
	}

	for (int q = 0; q < 68; q++)
	{
		gps_data_recive[q] = usart_data_receive();
 214:	0e 94 5d 00 	call	0xba	; 0xba <usart_data_receive>
 218:	89 93       	st	Y+, r24
	{
		usart_data_transmit(Get_Gps_location[a]);
		//_delay_ms(10);
	}

	for (int q = 0; q < 68; q++)
 21a:	0c 17       	cp	r16, r28
 21c:	1d 07       	cpc	r17, r29
 21e:	d1 f7       	brne	.-12     	; 0x214 <main+0x46>
 220:	e6 e0       	ldi	r30, 0x06	; 6
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	ae e4       	ldi	r26, 0x4E	; 78
 226:	b1 e0       	ldi	r27, 0x01	; 1
 228:	8e e0       	ldi	r24, 0x0E	; 14
 22a:	91 e0       	ldi	r25, 0x01	; 1
		gps_data_recive[q] = usart_data_receive();
	}
	
	for (int q = 48; q < 56; q++)
	{
		longitude[q-48] = gps_data_recive[q];
 22c:	21 91       	ld	r18, Z+
 22e:	2d 93       	st	X+, r18
	for (int q = 0; q < 68; q++)
	{
		gps_data_recive[q] = usart_data_receive();
	}
	
	for (int q = 48; q < 56; q++)
 230:	8e 17       	cp	r24, r30
 232:	9f 07       	cpc	r25, r31
 234:	d9 f7       	brne	.-10     	; 0x22c <main+0x5e>
 236:	ef e0       	ldi	r30, 0x0F	; 15
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	ad e5       	ldi	r26, 0x5D	; 93
 23c:	b1 e0       	ldi	r27, 0x01	; 1
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	91 e0       	ldi	r25, 0x01	; 1
		longitude[q-48] = gps_data_recive[q];
	}
	
	for (int q = 57; q < 66; q++)
	{
		latitude[q-57] = gps_data_recive[q];
 242:	21 91       	ld	r18, Z+
 244:	2d 93       	st	X+, r18
	for (int q = 48; q < 56; q++)
	{
		longitude[q-48] = gps_data_recive[q];
	}
	
	for (int q = 57; q < 66; q++)
 246:	e8 17       	cp	r30, r24
 248:	f9 07       	cpc	r31, r25
 24a:	d9 f7       	brne	.-10     	; 0x242 <main+0x74>
	
	
	//////////////////////////Ultrasonic///////////////////////////////////////
	long count;
	double distance;
	DDRA = 0x01;		/* Make trigger pin as output */
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	8a bb       	out	0x1a, r24	; 26
	PORTD = 0b01000000;		/* Turn on Pull-up */
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	82 bb       	out	0x12, r24	; 18
	sei();			/* Enable global interrupt */
 254:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
 25a:	1f bc       	out	0x2f, r1	; 47
	
	///////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////Rain///////////////////////////////////
	DDRD = 0x00;
 25c:	11 ba       	out	0x11, r1	; 17
	DDRB = 0b00000011;
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	87 bb       	out	0x17, r24	; 23

	PORTD &= ~(1 << PD4); // Pin n goes low
 262:	94 98       	cbi	0x12, 4	; 18
		PORTA |= (1 << Trigger_pin);
		_delay_us(10);
		PORTA &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
 264:	01 e4       	ldi	r16, 0x41	; 65
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 266:	d0 e2       	ldi	r29, 0x20	; 32
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 268:	c4 e0       	ldi	r28, 0x04	; 4

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
 26a:	11 e0       	ldi	r17, 0x01	; 1
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		if(distance<=10)
		{
			
			PORTB=0b00000010;
 26c:	68 94       	set
 26e:	ff 24       	eor	r15, r15
 270:	f1 f8       	bld	r15, 1
	while (1)
	{
		
		
		//////////////////////////Ultrasonic///////////////////////////////////////
		PORTA |= (1 << Trigger_pin);
 272:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	2a e1       	ldi	r18, 0x1A	; 26
 276:	2a 95       	dec	r18
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0xa8>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0xae>
		_delay_us(10);
		PORTA &= (~(1 << Trigger_pin));
 27c:	d8 98       	cbi	0x1b, 0	; 27
		
		TCNT1 = 0;	/* Clear Timer counter */
 27e:	1d bc       	out	0x2d, r1	; 45
 280:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
 282:	0e bd       	out	0x2e, r16	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 284:	d8 bf       	out	0x38, r29	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 286:	c8 bf       	out	0x38, r28	; 56

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
 288:	08 b6       	in	r0, 0x38	; 56
 28a:	05 fe       	sbrs	r0, 5
 28c:	fd cf       	rjmp	.-6      	; 0x288 <main+0xba>
		TCNT1 = 0;	/* Clear Timer counter */
 28e:	1d bc       	out	0x2d, r1	; 45
 290:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
 292:	1e bd       	out	0x2e, r17	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 294:	d8 bf       	out	0x38, r29	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 296:	c8 bf       	out	0x38, r28	; 56
		TimerOverflow = 0;/* Clear Timer overflow count */
 298:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__data_end+0x1>
 29c:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <__data_end>

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
 2a0:	08 b6       	in	r0, 0x38	; 56
 2a2:	05 fe       	sbrs	r0, 5
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <main+0xd2>
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
 2a6:	66 b5       	in	r22, 0x26	; 38
 2a8:	77 b5       	in	r23, 0x27	; 39
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		if(distance<=10)
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 2e 02 	call	0x45c	; 0x45c <__floatsisf>
 2b2:	29 e2       	ldi	r18, 0x29	; 41
 2b4:	3c e3       	ldi	r19, 0x3C	; 60
 2b6:	49 ee       	ldi	r20, 0xE9	; 233
 2b8:	53 e4       	ldi	r21, 0x43	; 67
 2ba:	0e 94 ba 01 	call	0x374	; 0x374 <__divsf3>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e2       	ldi	r20, 0x20	; 32
 2c4:	51 e4       	ldi	r21, 0x41	; 65
 2c6:	0e 94 b5 01 	call	0x36a	; 0x36a <__cmpsf2>
 2ca:	18 16       	cp	r1, r24
 2cc:	14 f1       	brlt	.+68     	; 0x312 <main+0x144>
		{
			
			PORTB=0b00000010;
 2ce:	f8 ba       	out	0x18, r15	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	91 e1       	ldi	r25, 0x11	; 17
 2d4:	2a e7       	ldi	r18, 0x7A	; 122
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x108>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x112>
 2e0:	00 00       	nop
			if(b == 0)
			{
				//b = 1;
				_delay_ms(5000);
				strcat(emergency, longitude);
 2e2:	6e e4       	ldi	r22, 0x4E	; 78
 2e4:	71 e0       	ldi	r23, 0x01	; 1
 2e6:	80 e6       	ldi	r24, 0x60	; 96
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 de 02 	call	0x5bc	; 0x5bc <strcat>
				strcat(emergency, latitude);
 2ee:	6d e5       	ldi	r22, 0x5D	; 93
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	80 e6       	ldi	r24, 0x60	; 96
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 de 02 	call	0x5bc	; 0x5bc <strcat>
				Send_msg();
 2fa:	0e 94 78 00 	call	0xf0	; 0xf0 <Send_msg>
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	91 e1       	ldi	r25, 0x11	; 17
 302:	2a e7       	ldi	r18, 0x7A	; 122
 304:	81 50       	subi	r24, 0x01	; 1
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	20 40       	sbci	r18, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x136>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x140>
 30e:	00 00       	nop
 310:	01 c0       	rjmp	.+2      	; 0x314 <main+0x146>

		}
		
		else{
		
			PORTB=0b00000000;
 312:	18 ba       	out	0x18, r1	; 24
		
		///////////////////////////////////////////////////////////////////////////
		
		////////////////////////////Rain///////////////////////////////////////////
		
		if (PIND & (1<<PD4))
 314:	84 9b       	sbis	0x10, 4	; 16
 316:	02 c0       	rjmp	.+4      	; 0x31c <main+0x14e>
		{
			PORTB = 0b00000000;
 318:	18 ba       	out	0x18, r1	; 24
 31a:	ab cf       	rjmp	.-170    	; 0x272 <main+0xa4>
		}
		else
		{
			PORTB = 0b00000001;
 31c:	18 bb       	out	0x18, r17	; 24
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	91 e1       	ldi	r25, 0x11	; 17
 322:	2a e7       	ldi	r18, 0x7A	; 122
 324:	81 50       	subi	r24, 0x01	; 1
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	20 40       	sbci	r18, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x156>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x160>
 32e:	00 00       	nop
			if(b == 0)
			{
				//b = 1;
				_delay_ms(5000);
				strcat(emergency, longitude);
 330:	6e e4       	ldi	r22, 0x4E	; 78
 332:	71 e0       	ldi	r23, 0x01	; 1
 334:	80 e6       	ldi	r24, 0x60	; 96
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 de 02 	call	0x5bc	; 0x5bc <strcat>
				strcat(emergency, latitude);
 33c:	6d e5       	ldi	r22, 0x5D	; 93
 33e:	71 e0       	ldi	r23, 0x01	; 1
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 de 02 	call	0x5bc	; 0x5bc <strcat>
				Send_msg();
 348:	0e 94 78 00 	call	0xf0	; 0xf0 <Send_msg>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	91 e1       	ldi	r25, 0x11	; 17
 350:	2a e7       	ldi	r18, 0x7A	; 122
 352:	81 50       	subi	r24, 0x01	; 1
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	20 40       	sbci	r18, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x184>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x18e>
 35c:	00 00       	nop
 35e:	89 cf       	rjmp	.-238    	; 0x272 <main+0xa4>
 360:	c6 ed       	ldi	r28, 0xD6	; 214
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	0a e1       	ldi	r16, 0x1A	; 26
 366:	11 e0       	ldi	r17, 0x01	; 1
 368:	55 cf       	rjmp	.-342    	; 0x214 <main+0x46>

0000036a <__cmpsf2>:
 36a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_cmp>
 36e:	08 f4       	brcc	.+2      	; 0x372 <__cmpsf2+0x8>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret

00000374 <__divsf3>:
 374:	0e 94 ce 01 	call	0x39c	; 0x39c <__divsf3x>
 378:	0c 94 a4 02 	jmp	0x548	; 0x548 <__fp_round>
 37c:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_pscB>
 380:	58 f0       	brcs	.+22     	; 0x398 <__divsf3+0x24>
 382:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_pscA>
 386:	40 f0       	brcs	.+16     	; 0x398 <__divsf3+0x24>
 388:	29 f4       	brne	.+10     	; 0x394 <__divsf3+0x20>
 38a:	5f 3f       	cpi	r21, 0xFF	; 255
 38c:	29 f0       	breq	.+10     	; 0x398 <__divsf3+0x24>
 38e:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_inf>
 392:	51 11       	cpse	r21, r1
 394:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_szero>
 398:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_nan>

0000039c <__divsf3x>:
 39c:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_split3>
 3a0:	68 f3       	brcs	.-38     	; 0x37c <__divsf3+0x8>

000003a2 <__divsf3_pse>:
 3a2:	99 23       	and	r25, r25
 3a4:	b1 f3       	breq	.-20     	; 0x392 <__divsf3+0x1e>
 3a6:	55 23       	and	r21, r21
 3a8:	91 f3       	breq	.-28     	; 0x38e <__divsf3+0x1a>
 3aa:	95 1b       	sub	r25, r21
 3ac:	55 0b       	sbc	r21, r21
 3ae:	bb 27       	eor	r27, r27
 3b0:	aa 27       	eor	r26, r26
 3b2:	62 17       	cp	r22, r18
 3b4:	73 07       	cpc	r23, r19
 3b6:	84 07       	cpc	r24, r20
 3b8:	38 f0       	brcs	.+14     	; 0x3c8 <__divsf3_pse+0x26>
 3ba:	9f 5f       	subi	r25, 0xFF	; 255
 3bc:	5f 4f       	sbci	r21, 0xFF	; 255
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	44 1f       	adc	r20, r20
 3c4:	aa 1f       	adc	r26, r26
 3c6:	a9 f3       	breq	.-22     	; 0x3b2 <__divsf3_pse+0x10>
 3c8:	35 d0       	rcall	.+106    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3ca:	0e 2e       	mov	r0, r30
 3cc:	3a f0       	brmi	.+14     	; 0x3dc <__divsf3_pse+0x3a>
 3ce:	e0 e8       	ldi	r30, 0x80	; 128
 3d0:	32 d0       	rcall	.+100    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3d2:	91 50       	subi	r25, 0x01	; 1
 3d4:	50 40       	sbci	r21, 0x00	; 0
 3d6:	e6 95       	lsr	r30
 3d8:	00 1c       	adc	r0, r0
 3da:	ca f7       	brpl	.-14     	; 0x3ce <__divsf3_pse+0x2c>
 3dc:	2b d0       	rcall	.+86     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3de:	fe 2f       	mov	r31, r30
 3e0:	29 d0       	rcall	.+82     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	bb 1f       	adc	r27, r27
 3ea:	26 17       	cp	r18, r22
 3ec:	37 07       	cpc	r19, r23
 3ee:	48 07       	cpc	r20, r24
 3f0:	ab 07       	cpc	r26, r27
 3f2:	b0 e8       	ldi	r27, 0x80	; 128
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__divsf3_pse+0x56>
 3f6:	bb 0b       	sbc	r27, r27
 3f8:	80 2d       	mov	r24, r0
 3fa:	bf 01       	movw	r22, r30
 3fc:	ff 27       	eor	r31, r31
 3fe:	93 58       	subi	r25, 0x83	; 131
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	3a f0       	brmi	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	9e 3f       	cpi	r25, 0xFE	; 254
 406:	51 05       	cpc	r21, r1
 408:	78 f0       	brcs	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40a:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_inf>
 40e:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_szero>
 412:	5f 3f       	cpi	r21, 0xFF	; 255
 414:	e4 f3       	brlt	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	98 3e       	cpi	r25, 0xE8	; 232
 418:	d4 f3       	brlt	.-12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 41a:	86 95       	lsr	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b7 95       	ror	r27
 422:	f7 95       	ror	r31
 424:	9f 5f       	subi	r25, 0xFF	; 255
 426:	c9 f7       	brne	.-14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 428:	88 0f       	add	r24, r24
 42a:	91 1d       	adc	r25, r1
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	97 f9       	bld	r25, 7
 432:	08 95       	ret
 434:	e1 e0       	ldi	r30, 0x01	; 1
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	bb 1f       	adc	r27, r27
 43e:	62 17       	cp	r22, r18
 440:	73 07       	cpc	r23, r19
 442:	84 07       	cpc	r24, r20
 444:	ba 07       	cpc	r27, r26
 446:	20 f0       	brcs	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 448:	62 1b       	sub	r22, r18
 44a:	73 0b       	sbc	r23, r19
 44c:	84 0b       	sbc	r24, r20
 44e:	ba 0b       	sbc	r27, r26
 450:	ee 1f       	adc	r30, r30
 452:	88 f7       	brcc	.-30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 454:	e0 95       	com	r30
 456:	08 95       	ret

00000458 <__floatunsisf>:
 458:	e8 94       	clt
 45a:	09 c0       	rjmp	.+18     	; 0x46e <__floatsisf+0x12>

0000045c <__floatsisf>:
 45c:	97 fb       	bst	r25, 7
 45e:	3e f4       	brtc	.+14     	; 0x46e <__floatsisf+0x12>
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	99 23       	and	r25, r25
 470:	a9 f0       	breq	.+42     	; 0x49c <__floatsisf+0x40>
 472:	f9 2f       	mov	r31, r25
 474:	96 e9       	ldi	r25, 0x96	; 150
 476:	bb 27       	eor	r27, r27
 478:	93 95       	inc	r25
 47a:	f6 95       	lsr	r31
 47c:	87 95       	ror	r24
 47e:	77 95       	ror	r23
 480:	67 95       	ror	r22
 482:	b7 95       	ror	r27
 484:	f1 11       	cpse	r31, r1
 486:	f8 cf       	rjmp	.-16     	; 0x478 <__floatsisf+0x1c>
 488:	fa f4       	brpl	.+62     	; 0x4c8 <__floatsisf+0x6c>
 48a:	bb 0f       	add	r27, r27
 48c:	11 f4       	brne	.+4      	; 0x492 <__floatsisf+0x36>
 48e:	60 ff       	sbrs	r22, 0
 490:	1b c0       	rjmp	.+54     	; 0x4c8 <__floatsisf+0x6c>
 492:	6f 5f       	subi	r22, 0xFF	; 255
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	8f 4f       	sbci	r24, 0xFF	; 255
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	16 c0       	rjmp	.+44     	; 0x4c8 <__floatsisf+0x6c>
 49c:	88 23       	and	r24, r24
 49e:	11 f0       	breq	.+4      	; 0x4a4 <__floatsisf+0x48>
 4a0:	96 e9       	ldi	r25, 0x96	; 150
 4a2:	11 c0       	rjmp	.+34     	; 0x4c6 <__floatsisf+0x6a>
 4a4:	77 23       	and	r23, r23
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <__floatsisf+0x54>
 4a8:	9e e8       	ldi	r25, 0x8E	; 142
 4aa:	87 2f       	mov	r24, r23
 4ac:	76 2f       	mov	r23, r22
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <__floatsisf+0x5e>
 4b0:	66 23       	and	r22, r22
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <__floatsisf+0x74>
 4b4:	96 e8       	ldi	r25, 0x86	; 134
 4b6:	86 2f       	mov	r24, r22
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	2a f0       	brmi	.+10     	; 0x4c8 <__floatsisf+0x6c>
 4be:	9a 95       	dec	r25
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	88 1f       	adc	r24, r24
 4c6:	da f7       	brpl	.-10     	; 0x4be <__floatsisf+0x62>
 4c8:	88 0f       	add	r24, r24
 4ca:	96 95       	lsr	r25
 4cc:	87 95       	ror	r24
 4ce:	97 f9       	bld	r25, 7
 4d0:	08 95       	ret

000004d2 <__fp_cmp>:
 4d2:	99 0f       	add	r25, r25
 4d4:	00 08       	sbc	r0, r0
 4d6:	55 0f       	add	r21, r21
 4d8:	aa 0b       	sbc	r26, r26
 4da:	e0 e8       	ldi	r30, 0x80	; 128
 4dc:	fe ef       	ldi	r31, 0xFE	; 254
 4de:	16 16       	cp	r1, r22
 4e0:	17 06       	cpc	r1, r23
 4e2:	e8 07       	cpc	r30, r24
 4e4:	f9 07       	cpc	r31, r25
 4e6:	c0 f0       	brcs	.+48     	; 0x518 <__fp_cmp+0x46>
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	e4 07       	cpc	r30, r20
 4ee:	f5 07       	cpc	r31, r21
 4f0:	98 f0       	brcs	.+38     	; 0x518 <__fp_cmp+0x46>
 4f2:	62 1b       	sub	r22, r18
 4f4:	73 0b       	sbc	r23, r19
 4f6:	84 0b       	sbc	r24, r20
 4f8:	95 0b       	sbc	r25, r21
 4fa:	39 f4       	brne	.+14     	; 0x50a <__fp_cmp+0x38>
 4fc:	0a 26       	eor	r0, r26
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_cmp+0x46>
 500:	23 2b       	or	r18, r19
 502:	24 2b       	or	r18, r20
 504:	25 2b       	or	r18, r21
 506:	21 f4       	brne	.+8      	; 0x510 <__fp_cmp+0x3e>
 508:	08 95       	ret
 50a:	0a 26       	eor	r0, r26
 50c:	09 f4       	brne	.+2      	; 0x510 <__fp_cmp+0x3e>
 50e:	a1 40       	sbci	r26, 0x01	; 1
 510:	a6 95       	lsr	r26
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	81 1d       	adc	r24, r1
 516:	81 1d       	adc	r24, r1
 518:	08 95       	ret

0000051a <__fp_inf>:
 51a:	97 f9       	bld	r25, 7
 51c:	9f 67       	ori	r25, 0x7F	; 127
 51e:	80 e8       	ldi	r24, 0x80	; 128
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	08 95       	ret

00000526 <__fp_nan>:
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	80 ec       	ldi	r24, 0xC0	; 192
 52a:	08 95       	ret

0000052c <__fp_pscA>:
 52c:	00 24       	eor	r0, r0
 52e:	0a 94       	dec	r0
 530:	16 16       	cp	r1, r22
 532:	17 06       	cpc	r1, r23
 534:	18 06       	cpc	r1, r24
 536:	09 06       	cpc	r0, r25
 538:	08 95       	ret

0000053a <__fp_pscB>:
 53a:	00 24       	eor	r0, r0
 53c:	0a 94       	dec	r0
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	05 06       	cpc	r0, r21
 546:	08 95       	ret

00000548 <__fp_round>:
 548:	09 2e       	mov	r0, r25
 54a:	03 94       	inc	r0
 54c:	00 0c       	add	r0, r0
 54e:	11 f4       	brne	.+4      	; 0x554 <__fp_round+0xc>
 550:	88 23       	and	r24, r24
 552:	52 f0       	brmi	.+20     	; 0x568 <__fp_round+0x20>
 554:	bb 0f       	add	r27, r27
 556:	40 f4       	brcc	.+16     	; 0x568 <__fp_round+0x20>
 558:	bf 2b       	or	r27, r31
 55a:	11 f4       	brne	.+4      	; 0x560 <__fp_round+0x18>
 55c:	60 ff       	sbrs	r22, 0
 55e:	04 c0       	rjmp	.+8      	; 0x568 <__fp_round+0x20>
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	08 95       	ret

0000056a <__fp_split3>:
 56a:	57 fd       	sbrc	r21, 7
 56c:	90 58       	subi	r25, 0x80	; 128
 56e:	44 0f       	add	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	59 f0       	breq	.+22     	; 0x58a <__fp_splitA+0x10>
 574:	5f 3f       	cpi	r21, 0xFF	; 255
 576:	71 f0       	breq	.+28     	; 0x594 <__fp_splitA+0x1a>
 578:	47 95       	ror	r20

0000057a <__fp_splitA>:
 57a:	88 0f       	add	r24, r24
 57c:	97 fb       	bst	r25, 7
 57e:	99 1f       	adc	r25, r25
 580:	61 f0       	breq	.+24     	; 0x59a <__fp_splitA+0x20>
 582:	9f 3f       	cpi	r25, 0xFF	; 255
 584:	79 f0       	breq	.+30     	; 0x5a4 <__fp_splitA+0x2a>
 586:	87 95       	ror	r24
 588:	08 95       	ret
 58a:	12 16       	cp	r1, r18
 58c:	13 06       	cpc	r1, r19
 58e:	14 06       	cpc	r1, r20
 590:	55 1f       	adc	r21, r21
 592:	f2 cf       	rjmp	.-28     	; 0x578 <__fp_split3+0xe>
 594:	46 95       	lsr	r20
 596:	f1 df       	rcall	.-30     	; 0x57a <__fp_splitA>
 598:	08 c0       	rjmp	.+16     	; 0x5aa <__fp_splitA+0x30>
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	f1 cf       	rjmp	.-30     	; 0x586 <__fp_splitA+0xc>
 5a4:	86 95       	lsr	r24
 5a6:	71 05       	cpc	r23, r1
 5a8:	61 05       	cpc	r22, r1
 5aa:	08 94       	sec
 5ac:	08 95       	ret

000005ae <__fp_zero>:
 5ae:	e8 94       	clt

000005b0 <__fp_szero>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	66 27       	eor	r22, r22
 5b4:	77 27       	eor	r23, r23
 5b6:	cb 01       	movw	r24, r22
 5b8:	97 f9       	bld	r25, 7
 5ba:	08 95       	ret

000005bc <strcat>:
 5bc:	fb 01       	movw	r30, r22
 5be:	dc 01       	movw	r26, r24
 5c0:	0d 90       	ld	r0, X+
 5c2:	00 20       	and	r0, r0
 5c4:	e9 f7       	brne	.-6      	; 0x5c0 <strcat+0x4>
 5c6:	11 97       	sbiw	r26, 0x01	; 1
 5c8:	01 90       	ld	r0, Z+
 5ca:	0d 92       	st	X+, r0
 5cc:	00 20       	and	r0, r0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <strcat+0xc>
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
